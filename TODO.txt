- Resolve bugs on NVIDIA Jetson Nanos:

  - examples/rk4.lisp: Lisp image corruption
  - examples/axpy.lisp: Lisp image corruption

  UPDATE: It seems the POCL implementation on the nanos does not
  support double precision floating point operations.  I don't know
  when this would ever be fixed, but for the future testing on the
  nanos requires :float types.  Examples should probably be written
  with flexible type arguments in any case.

+ Find some way to automate handler-cleanup function generation.

  UPDATE: Created handler branch.
  
  UPDATE: After some thought, the approach taken in the
  make-opencl-handler function from the handler branch is not as
  useful as first thought.  E.g., the make-opencl-rk4 function doesn't
  benefit much from porting to the make-opencl-handler system since
  the buffer-argument one-to-one relationship doesn't fully apply to
  all parameters (e.g. x0 and xbuf), and additionally the "k" buffers
  are easier to treat as a set of buffers rather than parameters.
  There is almost no added benefit to using make-opencl-handler for
  this function, and I anticipate that this will be true for many
  others as well.  The problem of creating a handler and cleanup
  function seems to be the crux of creating useful OpenCL interfaces,
  and so each type of handler represents a class of problems and
  solutions, but other problems will have significantly different
  solutions and therefore the various solutions cannot be abstracted
  easily into a common solution.  What might be more helpful is
  writing a guide and some templates/checklists for writing handlers
  and cleanup functions.

+ While testing POCL 1.8 on the Core i7 system, I noticed that
  repeatedly calling #'reduce-example using POCL leads to gradual
  device memory use increase, whereas doing the same using an NVIDIA
  platform does not lead to increasing device memory usage.

+ Find source of possible bug using POCL 1.7 and #'reduce-example from
  examples/mapreduce.lisp.  On an old Sony Vaio laptop, this causes
  the SBCL image integrity to be compromised and hangs until the
  process is killed.  #'map-example does not crash in the same way.
  Need to test these examples on multiple systems running POCL 1.7 to
  see if it's a code issue, POCL issue in general, or just an issue on
  a single system.

  UPDATE: Another system running POCL 1.8 on an Intel Core i7 has no
  issues with #'reduce-example.  Will try POCL 1.7 on the same system.

  UPDATE: POCL 1.7-2 from Arch Linux works fine on the Core i7 system.
  Will try upgrading POCL to 1.8 on the Vaio system to see if bugs
  persist.

+ Add support for either parameter lists or single buffer arguments to
  all "make-opencl-*"-generated functions so that either data supplied
  from Lisp or data already on the OpenCL device can be used by OpenCL
  kernels as supplementary arguments.  This could be easily
  accomplished in most functions by setting the kernel argument
  instead of queuing a buffer write event.

  UPDATE: Added support to rk4 but need to test and add to others.

  UPDATE: Parameter support needs to be standardized.  At the moment,
  different systems expect different arguments for parameters.  E.g.,
  make-opencl-convolutor expects to supply parameters as distinct
  arguments rather than as a single "param" argument or something
  along those lines.  make-opencl-rk4 on the other hand uses kernels
  with a "param" argument.  It would make more sense to use a standard
  "param" argument method like make-opencl-rk4 uses.

  UPDATE: Special not should be made for parameter handling that
  either 1. nparams + list of parameters, or 2. parameter buffer
  should be used.  I.e., if you want to use a buffer, don't worry
  about nparams, but if you want to use a list of parameters, you must
  supply the amount of parameters needed to the make-opencl-X
  function.

+ Add macros to assist in standardized argument definitions,
  e.g. sticky arguments and the list-or-buffer parameter arguments
  mentioned in another to-do item.

  Ideas: 

+ Add handlers/restarts for foreign memory cleanup.  At the moment
  OpenCL memory is easily leaked due to encountering an error, so some
  tools that assist in cleaning up memory would be useful.

- Add suite of complex math functions, including libcerf

- Add support for complex integration

- Add a midpoint integrator based on make-opencl-function-sampler and
  make-opencl-reducer.  Data should be generated per-job and then
  processed with the rest of the reduction algorithm, not broken into
  separate jobs that use lots of global memory.

- Add adjustable parameter support for:

  - make-opencl-mapper

- Add explicit dependency management via event-wait-list arguments for
  all applicable utilities.  Utilities should not assume anything
  unnecessary about command queues, such as whether they are IOE or
  OOE.

  This includes adding event-wait-list arguments to the utilities and
  any functions they generate where such arguments would be
  appropriate.

- Modify RK4 so that multiple kernels can be run on the same inputs in
  parallel.  It's more efficient to have kernels submitted in parallel
  than to have one kernel conditionally branch during execution.

- Add parameter support to RK4 kernels
